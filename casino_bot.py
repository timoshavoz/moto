import logging
import random
import asyncio
import time
import os
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from flask import Flask

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –û–ó–£, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏)
users = {}

# –§—Ä—É–∫—Ç—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤
SLOT_SYMBOLS = ['üçí', 'üçã', 'üçä', 'üçâ', 'üçá', 'üçì']

BONUS_COOLDOWN = 7 * 24 * 60 * 60  # 1 –Ω–µ–¥–µ–ª—è

def get_user_data(user_id):
    if user_id not in users:
        users[user_id] = {
            'balance': 1000,
            'earned': 0,
            'withdrawn': 0,
            'last_bonus': 0
        }
    return users[user_id]

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "–ö–∞–∑–∏–Ω–æ-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
        InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data='play')
    ], [
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
        InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='deposit'),
        InlineKeyboardButton("üèß –í—ã–≤–æ–¥", callback_data='withdraw')
    ], [
        InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª", callback_data='referral'),
        InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å", callback_data='bonus')
    ]]
    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞!", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞!", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = get_user_data(user_id)

    if query.data == 'balance':
        await query.edit_message_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {data['balance']} –º–æ–Ω–µ—Ç", reply_markup=return_menu())

    elif query.data == 'stats':
        await query.edit_message_text(f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {data['earned']} –º–æ–Ω–µ—Ç\n–í—ã –≤—ã–≤–µ–ª–∏: {data['withdrawn']} –º–æ–Ω–µ—Ç", reply_markup=return_menu())

    elif query.data == 'play':
        keyboard = [[
            InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data='slots'),
            InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data='dice')
        ], [
            InlineKeyboardButton("ü™ô –ú–æ–Ω–µ—Ç–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data='dev'),
            InlineKeyboardButton("‚úÇ –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data='dev')
        ], [InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'slots':
        context.user_data['game'] = 'slots'
        await ask_bet(query, data)

    elif query.data == 'dice':
        context.user_data['game'] = 'dice'
        await ask_bet(query, data)

    elif query.data == 'menu':
        await start(update, context)

    elif query.data == 'bonus':
        now = time.time()
        if now - data['last_bonus'] >= BONUS_COOLDOWN:
            data['balance'] += 500
            data['last_bonus'] = now
            await query.edit_message_text("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å 500 –º–æ–Ω–µ—Ç!", reply_markup=return_menu())
        else:
            remain = int(BONUS_COOLDOWN - (now - data['last_bonus']))
            days = remain // 86400
            hours = (remain % 86400) // 3600
            minutes = (remain % 3600) // 60
            await query.edit_message_text(f"–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {days} –¥. {hours} —á. {minutes} –º.", reply_markup=return_menu())

    elif query.data == 'dev':
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=return_menu())

async def ask_bet(query, data):
    await query.edit_message_text(
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {data['balance']} –º–æ–Ω–µ—Ç\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")

# –í–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –≤—Ä—É—á–Ω—É—é
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    data = get_user_data(user_id)
    text = update.message.text

    if 'game' in context.user_data:
        try:
            bet = int(text)
            if bet <= 0 or bet > data['balance']:
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:")
                return
            game = context.user_data['game']
            if game == 'slots':
                await play_slots(update, context, bet)
            elif game == 'dice':
                await play_dice(update, context, bet)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

def return_menu():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]])

# –°–ª–æ—Ç—ã
async def play_slots(update: Update, context: ContextTypes.DEFAULT_TYPE, bet: int):
    user_id = update.message.from_user.id
    data = get_user_data(user_id)
    data['balance'] -= bet

    msg = await update.message.reply_text("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...")
    for _ in range(3):
        slots = [random.choice(SLOT_SYMBOLS) for _ in range(3)]
        await asyncio.sleep(1)
        await msg.edit_text("| {} | {} | {} |".format(*slots))

    slots = [random.choice(SLOT_SYMBOLS) for _ in range(3)]
    await asyncio.sleep(1)
    await msg.edit_text("üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n| {} | {} | {} |".format(*slots))

    if slots[0] == slots[1] == slots[2]:
        win = bet * 5
        data['balance'] += win
        data['earned'] += win - bet
        await update.message.reply_text(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –º–æ–Ω–µ—Ç!", reply_markup=return_menu())
    elif slots[0] == slots[1] or slots[1] == slots[2] or slots[0] == slots[2]:
        await update.message.reply_text("–í—ã–ø–∞–ª–æ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ ‚Äî –ø—Ä–æ–∏–≥—Ä—ã—à.", reply_markup=return_menu())
    else:
        await update.message.reply_text("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", reply_markup=return_menu())

# –ö–æ—Å—Ç–∏
async def play_dice(update: Update, context: ContextTypes.DEFAULT_TYPE, bet: int):
    user_id = update.message.from_user.id
    data = get_user_data(user_id)
    data['balance'] -= bet

    msg = await update.message.reply_text("üé≤ –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏...")
    await asyncio.sleep(1)
    user_roll = random.randint(1, 6)
    bot_roll = random.randint(1, 6)
    await msg.edit_text(f"–í—ã: {user_roll} üé≤\n–ë–æ—Ç: {bot_roll} üé≤")

    if user_roll > bot_roll:
        win = bet * 2
        data['balance'] += win
        data['earned'] += win - bet
        await update.message.reply_text(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –º–æ–Ω–µ—Ç!", reply_markup=return_menu())
    elif user_roll == bot_roll:
        data['balance'] += bet
        await update.message.reply_text("–ù–∏—á—å—è. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", reply_markup=return_menu())
    else:
        await update.message.reply_text("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", reply_markup=return_menu())

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
        app_bot = ApplicationBuilder().token(TOKEN).build()
        app_bot.add_handler(CommandHandler('start', start))
        app_bot.add_handler(CallbackQueryHandler(button))
        app_bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app_bot.run_polling()
